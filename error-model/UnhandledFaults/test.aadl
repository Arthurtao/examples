package unhandled_faults

public

with EMV2;

system sender
features
	valueout : out event port;
end sender;


system implementation sender.i1
annex EMV2 {**
	use types ErrorLibrary;
	
	error propagations
		valueout : out propagation {ValueError};
	flows
		f1 : error source valueout {ValueError};
	end propagations;
**};
end sender.i1;


system implementation sender.i2
annex EMV2 {**
	use types ErrorLibrary;
	
	error propagations
		valueout : out propagation {TimingError};
	flows
		f1 : error source valueout {TimingError};
	end propagations;
**};
end sender.i2;

system implementation sender.i3
annex EMV2 {**
	use types ErrorLibrary;
	
	error propagations
		valueout : out propagation {EarlyDelivery};
	flows
		f1 : error source valueout {EarlyDelivery};
	end propagations;
**};
end sender.i3;

system receiver
features
	valuein : in event port;
end receiver;

system receiver2
features
	valuein1 : in event port;
	valuein2 : in event port;
	valueout1 : out event port;
	valueout2 : out event port;
end receiver2;

system implementation receiver.i1
annex EMV2 {**
	use types ErrorLibrary;
	
	error propagations
		valuein : in propagation {ValueError};
	flows
		f1 : error sink valuein {ValueError}; 
	end propagations;
**};
end receiver.i1;


system implementation receiver.i2
annex EMV2 {**
	use types ErrorLibrary;
	use behavior ErrorModelLibrary::Simple;
	
	error propagations
		valuein : in propagation {TimingError};
	flows
		f1 : error sink valuein {TimingError}; 
	end propagations;
	
	component error behavior
	transitions
		Operational -[ Failure ]-> Failed;
	end component;
**};
end receiver.i2; 

system implementation receiver.i3
annex EMV2 {**
	use types ErrorLibrary;
	use behavior ErrorModelLibrary::Simple;
	error propagations
		valuein : in propagation {LateDelivery};
	flows
		f1 : error sink valuein {LateDelivery}; 
	end propagations;
	

**};
end receiver.i3;

system implementation receiver2.i1
annex EMV2 {**
	use types ErrorLibrary;
	use behavior ErrorModelLibrary::Simple;
	error propagations
		valuein1 : in propagation {LateDelivery};
		valueout1 : out propagation {ValueError};
		valuein2 : in propagation {LateDelivery};
		valueout2 : out propagation {ValueError};
	flows
		f1 : error sink valuein1 {LateDelivery}; 
		f2 : error source valueout1 {ValueError};
		f3 : error sink valuein2 {LateDelivery}; 
		f4 : error source valueout2 {ValueError};
	end propagations;
	
	component error behavior
	propagations
		p1 : Operational -[ valuein1{LateDelivery}]-> valueout1(ValueError); -- should raise error
		p2 : Operational -[ valuein1{LateDelivery}]-> valueout1(NoError); -- OK
		p3 : Operational -[ valuein2{LateDelivery}]-> valueout2(ValueError); -- error, we should declare a path here
	end component;
**};
end receiver2.i1;


system implementation receiver2.i2
annex EMV2 {**
	use types ErrorLibrary; 
	use behavior ErrorModelLibrary::Simple;
	error propagations
		valuein1 : in propagation {LateDelivery};
		valueout1 : out propagation {ValueError};
		valuein2 : in propagation {LateDelivery};
		valueout2 : out propagation {ValueError};
	flows
		f1 : error path valuein1 {LateDelivery} -> valueout1 (ValueError);
		f3 : error sink valuein2 {LateDelivery}; 
		f4 : error source valueout2 {ValueError};
	end propagations;
	
	component error behavior
	propagations
		p1 : Operational -[ valuein1{LateDelivery}]-> valueout1(ValueError); -- OK, we have the path
		p3 : Operational -[ valuein2{LateDelivery}]-> valueout2(ValueError); -- error, we should declare a path here
	end component;
**};
end receiver2.i2;

system implementation receiver2.i3
annex EMV2 {**
	use types ErrorLibrary; 
	use behavior ErrorModelLibrary::Simple;
	error propagations
		valueout1 : out propagation {ValueError, TimingError};
	flows 
		f4 : error source valueout1 {ValueError, TimingError};
	end propagations;
	
	component error behavior
	propagations
		p1 : Operational -[]-> valueout1(ValueError); -- Error, I should also have another one for TimingError
	end component;
**};
end receiver2.i3;

system implementation receiver2.i4
annex EMV2 {**
	use types ErrorLibrary; 
	use behavior ErrorModelLibrary::Simple;
	error propagations
		valuein1 : in propagation {ValueError, TimingError};
	flows 
		f4 : error sink valuein1 {ValueError, TimingError};
	end propagations;
	
	component error behavior
	transitions
	-- Warning, I do not have a transition from Failed to Operational
		t1 : Operational -[ valuein1{ValueError} ]-> Failed; 
	end component;
**};
end receiver2.i4;

system implementation receiver2.i5
annex EMV2 {**
	use types ErrorLibrary; 
	use behavior ErrorModelLibrary::Simple;
	error propagations
		valuein1 : in propagation {LateDelivery};
		valueout1 : out propagation {ValueError};
		valuein2 : in propagation {LateDelivery};
		valueout2 : out propagation {ValueError};
	flows
		f1 : error path valuein1 {LateDelivery} -> valueout1 (ValueError);
		f3 : error sink valuein2 {LateDelivery}; 
		f4 : error source valueout2 {ValueError};
	end propagations;
	
	component error behavior
	propagations
		p1 : Operational -[]-> valueout1(ValueError); -- Error, this is part of an error path
		p3 : Operational -[]-> valueout2(ValueError); -- OK
	end component;
**};
end receiver2.i5;

system assembly
end assembly;

system implementation assembly.i
subcomponents
	s1_1 : system sender.i1;
	s1_2 : system sender.i1;
	s2_1 : system sender.i2;
	s2_2 : system sender.i2;
	s3_1 : system sender.i3;
	r1_1 : system receiver.i1;
	r1_2 : system receiver.i1;
	r2_1 : system receiver.i2;
	r2_2 : system receiver.i2;
connections
	c1 : port s1_1.valueout -> r1_1.valuein;
	c2 : port s1_2.valueout -> r1_1.valuein;
	c3 : port s3_1.valueout -> r2_1.valuein; 
annex EMV2 {**
	use types ErrorLibrary;
	use behavior ErrorModelLibrary::Simple;
	
	component error behavior
	end component;
	
	composite error behavior
	states
		[ r2_1.Failed ]-> Failed;
	end composite;
**};	
end assembly.i;



system implementation assembly.i2
subcomponents
	s1_1 : system sender.i1;
	s1_2 : system sender.i1;
	s2_1 : system sender.i2;
	s2_2 : system sender.i2;
	s3_1 : system sender.i3;
	r1_1 : system receiver.i1;
	r1_2 : system receiver.i1;
	r2_1 : system receiver.i2;
	r2_2 : system receiver.i2;
connections
	c1 : port s1_1.valueout -> r1_1.valuein;
	c2 : port s1_2.valueout -> r1_1.valuein;
	c3 : port s3_1.valueout -> r2_1.valuein; 
annex EMV2 {**
	use types ErrorLibrary;
	use behavior ErrorModelLibrary::Simple;
	
	component error behavior
	events
		e1 : error event;
		e2 : error event;
	transitions
		t1 : Operational -[e1]-> Failed;
		t2 : Operational -[e2]-> Failed;
	end component;
	
	composite error behavior
	states
		[ r2_1.Failed ]-> Failed;
	end composite;
	-- ERROR because the occurrence value between the events in the component
	-- error behavior does not match the occurrence value of
	--  the component in the composite error behavior.
	properties
		EMV2::OccurrenceDistribution => [ ProbabilityValue => 0.2 ; Distribution => Fixed;] applies to e1;
		EMV2::OccurrenceDistribution => [ ProbabilityValue => 0.1 ; Distribution => Fixed;] applies to e2;
		EMV2::OccurrenceDistribution => [ ProbabilityValue => 0.4 ; Distribution => Fixed;] applies to r2_1.Failed;
**};	
end assembly.i2;

end unhandled_faults;
