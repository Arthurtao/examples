package resourcebudgets
public
with sei;
data SensorData
	properties
		Data_Size => 2 KByte;
end SensorData;

data actuatecmd
	properties
		Data_Size => 100 Bytes;
end actuatecmd;

-- Threads for the first process

thread sensor_sense_thread
features
   signalout: out data port SensorData;
   signalin: in data port SensorData;
properties
   Stack_Size => 10 Kbyte;
   Period => 20 ms;
   Compute_Execution_Time => 10 ms .. 12 ms;
   end sensor_sense_thread;


thread actuator_output_thread
features
   controlin: in data port actuatecmd;
   actuate: out data port actuatecmd;
properties
   Stack_Size => 10 Kbyte;
   Period => 20 ms;
   Compute_Execution_Time => 8 ms .. 10 ms;
end actuator_output_thread;


--  Threads for the second process

thread filterApp
features
   sensorraw: in data port SensorData;
   sensorfiltered: out data port SensorData;
 properties
   Stack_Size => 25 Kbyte;
   Data_size => 250 KByte; -- for logging
   Period => 20 ms;
   Compute_Execution_Time => 5 ms .. 7 ms;
end filterApp;

thread controlApp
features
   sensorfiltered: in data port SensorData;
   actuatesensor: out data port actuatecmd;
properties
   Stack_Size => 25 Kbyte;
   Data_size => 50 KByte; -- for control state
   Period => 20 ms;
   Compute_Execution_Time => 2 ms .. 6 ms;
end controlApp;


-- Now, declare process that model partition address space

process IOP
features
   sensorin: in data port SensorData;
   senseout: out data port SensorData;
   controlin: in event data port actuatecmd;
   actuatorout: out event data port actuatecmd;
properties
	SEI::MIPSBudget => 0.8 mips;
end IOP;

process implementation IOP.impl
subcomponents
   sense : thread sensor_sense_thread;
   actuate : thread actuator_output_thread;
connections
   incomingactuate : port controlin -> actuate.controlin;
   outgoingactuate : port actuate.actuate -> actuatorout;
   incomongsense: port sensorin -> sense.signalin;
   outgoingsense : port sense.signalout -> senseout;
end IOP.impl;


process APP
features
   samplingin: in data port SensorData ;
controlout: out data port actuatecmd ;
properties
	SEI::MIPSBudget => 0.7 mips;
end APP;

process implementation APP.impl
subcomponents
   filter   : thread filterApp;
   control    :  thread controlApp;
connections
   filtertocontrol: port filter.sensorfiltered -> control.sensorfiltered;
   incoming : port control.actuatesensor -> controlout;
   outgoing : port samplingin -> filter.sensorraw; 
end APP.impl;

-- computer hardware platform

processor powerpc
features
	power: in data port Power;
properties
	SEI::PowerBudget => 0.8 w applies to power;
	SEI::MIPSCapacity => 1.2 mips;
end powerpc;

bus CANbus
features
	power: in data port Power;
properties
	SEI::PowerBudget => 0.8 w applies to power;
end CANbus;


memory main_memory
features
	power: in data port Power;
properties
	SEI::PowerBudget => 0.8 w applies to power;
end main_memory;

system DCA
	features
	sensor1in : in data port SensorData;
	sensor2In: in data port SensorData;
	actuatorOut: out data port actuatecmd;
	properties
		SEI::MIPSBudget => 2.0 mips;
end mysapp;

system implementation DCA.tier1
subcomponents
   iop  : process IOP;
   app  : process APP;
connections
   sampledData: port iop.senseout ->
 app.samplingin;
   controlData: port app.controlout -> 
iop.controlin;
end DCA.tier1;

system implementation DCA.tier2 extends DCA.tier1
subcomponents
   iop  : refined to process IOP.impl;
   app  : refined to process APP.impl;
end DCA.tier2;


system platform
features
	canbusaccess: provides bus access CANbus;
	power: in data port Power;
properties
	SEI::PowerBudget => 0.8 w applies to power;
	SEI::MIPSCapacity => 2.4 mips;
end platform;

system implementation platform.single
subcomponents
  cpu: processor powerpc;
  ram: memory main_memory;
  canbus: bus CANbus;
end platform.single ;

system implementation platform.dual
subcomponents
  pc1: processor powerpc;
  pc2: processor powerpc;
  M: memory main_memory;
end platform.dual ;

device sensor
features
	power: in data port Power;
	canbusaccess: requires bus access CANbus;
properties
	SEI::GrossWeight => 0.18 kg;
	SEI::PowerBudget => 0.45 w applies to power;
	Period => 25 ms;
	Dispatch_Protocol => Periodic;
end sensor;

device actuator
features
	power: in data port Power;
	canbusaccess: requires bus access CANbus;
properties
	SEI::GrossWeight => 0.3 kg;
	SEI::PowerBudget => 0.8 w applies to power;
	Period => 25 ms;
	Dispatch_Protocol => Periodic;
end actuator;

system DCS
features
	canbusaccess: provides bus access CANbus;
	sensor1in : in data port SensorData;
	sensor2In: in data port SensorData;
	actuatorOut: out data port actuatecmd;
end DCS;

system implementation DCS.singletier0
	subcomponents
		app: system DCA;
		hw: system platform;
end DCS.singletier0;

system implementation DCS.singletier1
	subcomponents
		app: system DCA.tier1;
		hw: system platform.single;
end DCS.singletier1;

system implementation DCS.singletier2
	subcomponents
		app: system DCA.tier2;
		hw: system platform.single;
	properties
		Reference_Processor => classifier (powerpc);
end DCS.singletier2;

system implementation DCS.dualtier2
	subcomponents
		app: system DCA.tier2;
		hw: system platform.dual;
	properties
		Reference_Processor => classifier (powerpc);
end DCS.dualtier2;

system SCS
features
	power: in data port Power;
properties
	SEI::PowerBudget => 2.5w applies to power;
	SEI::WeightLimit => 1.2 kg;
end SCS;

system implementation SCS.tier0
	subcomponents
		dcs: system DCS.singletier0;
		sensor1: device sensor;
		sensor2: device sensor;
		actuator: device actuator;
--	connections
--		
end SCS.tier0;

system implementation SCS.tier1 extends SCS.tier0
	subcomponents
		dcs: refined to system DCS.singletier1;
end SCS.tier1;

system implementation SCS.tier2 extends SCS.tier1
	subcomponents
		dcs: refined to system DCS.singletier2;
end SCS.tier2;

system implementation SCS.dualtier2 extends SCS.tier1
	subcomponents
		dcs: refined to system DCS.dualtier2;
end SCS.dualtier2;

abstract Power
end Power;

abstract Mass
end Mass;


end resourcebudgets;