--
--
--  Model for the AADL tutorial at ESWeek 2016.
--  See details at https://wiki.sei.cmu.edu/aadl/index.php/ESWeek_Tutorial
--
--  Copyright Carnegie Mellon Software Engineering Institute, 2016.
--

package emsoft2016::integration

public

with security_properties;


with emsoft2016::devices;
with emsoft2016::software::image_acquisition;
with emsoft2016::software::obstacle_detection;
with emsoft2016::software::panel_control;
with emsoft2016::software::speed_controller;
with emsoft2016::software::speed_voter;
with emsoft2016::software::entertainment;
with emsoft2016::platform;

system integration
features
	bluetooth : requires bus access emsoft2016::platform::bluetooth;
end integration;

system implementation integration.generic
subcomponents
-- input devices
	obstacle_camera    : device emsoft2016::devices::camera;
	obstacle_radar     : device emsoft2016::devices::radar;
	wheel_sensor       : device emsoft2016::devices::speed_wheel_sensor;
	laser_sensor       : device emsoft2016::devices::speed_laser_sensor;
	panel              : device emsoft2016::devices::panel;
	tire_pressure      : device emsoft2016::devices::tpms;
	bluetooth_ctrl     : device emsoft2016::devices::bluetooth_controller;

-- software and processing elements.
    image_acquisition  : process emsoft2016::software::image_acquisition::image_acquisition.i;
    obstacle_detection : process emsoft2016::software::obstacle_detection::obstacle_detection.i;
    panel_controller   : process emsoft2016::software::panel_control::panel_control.i;
    speed_voter        : process emsoft2016::software::speed_voter::speed_voter.i;
    speed_ctrl         : process emsoft2016::software::speed_controller::speed_controller.i;
    entertainment      : process emsoft2016::software::entertainment::entertainment.i;
    
-- output devices
	brake         : device emsoft2016::devices::brake;
	acceleration  : device emsoft2016::devices::acceleration;
	screen        : device emsoft2016::devices::screen;
	speaker       : device emsoft2016::devices::speaker;
connections
    c00 : port obstacle_camera.picture               -> image_acquisition.picture;
    c01 : port image_acquisition.obstacle_detected   -> obstacle_detection.camera; 
    c02 : port obstacle_radar.distance_estimate      -> obstacle_detection.radar;
    c03 : port obstacle_detection.obstacle_position  -> speed_ctrl.obstacle_position;
    c04 : port wheel_sensor.speed                    -> speed_voter.wheel_sensor;
    c05 : port laser_sensor.speed                    -> speed_voter.laser_sensor;
    c06 : port speed_voter.speed                     -> speed_ctrl.current_speed;
    c07 : port speed_voter.speed                     -> screen.actual_speed;
    c08 : port speed_ctrl.speed_cmd                  -> acceleration.cmd;
    c09 : port speed_ctrl.brake_cmd                  -> brake.cmd;
    c10 : port speed_ctrl.warning                    -> screen.warning;
    c11 : port panel.increase_speed                  -> panel_controller.increase_speed;
    c12 : port panel.decrease_speed                  -> panel_controller.decrease_speed;
    c13 : port panel_controller.desired_speed        -> speed_ctrl.desired_speed;
    c14 : port speed_voter.speed                     -> panel_controller.current_speed;
    c15 : port panel_controller.desired_speed        -> screen.desired_speed;
	c16 : port bluetooth_ctrl.contacts               -> entertainment.contacts;
	c17 : port bluetooth_ctrl.music                  -> entertainment.music_in;
	c18 : port entertainment.music_out               -> speaker.music;
	c19 : port entertainment.infos                   -> screen.entertainment_infos;
	c20 : port panel_controller.tire_pressure_out    -> screen.tire_pressure;
flows
    --
    --  We assume the camera will take more time because of acquisition/processing time.
    --
    camera_to_accel : end to end flow obstacle_camera.f0 -> c00 -> image_acquisition.f0 -> c01 -> obstacle_detection.f0 -> c03 -> speed_ctrl.f00 -> c08 -> acceleration.f0
    	{latency => 50 ms .. 100 ms;};
    camera_to_brake : end to end flow obstacle_camera.f0 -> c00 -> image_acquisition.f0 -> c01 -> obstacle_detection.f0 -> c03 -> speed_ctrl.f10 -> c09 -> brake.f0
        {latency => 50 ms .. 100 ms;};
        
    --
    --  The radar is faster to process and produce information to the system.
    --
    radar_to_accel  : end to end flow obstacle_radar.f0  -> c02 -> obstacle_detection.f1 -> c03 -> speed_ctrl.f00 -> c08 -> acceleration.f0
    	{latency => 20 ms .. 60 ms;};
    radar_to_brake  : end to end flow obstacle_radar.f0  -> c02 -> obstacle_detection.f1 -> c03 -> speed_ctrl.f10 -> c09 -> brake.f0
    	{latency => 20 ms .. 60 ms;};
    
    
    --
    --  Laser and wheel provide the car speed. So, it should be quick to operate and produce data.
    --
    laser_to_accel  : end to end flow laser_sensor.f0 -> c05 -> speed_voter.f1 -> c06 -> speed_ctrl.f01 -> c08 -> acceleration.f0
        {latency => 10 ms .. 40 ms;};
    laser_to_brake  : end to end flow laser_sensor.f0 -> c05 -> speed_voter.f1 -> c06 -> speed_ctrl.f11 -> c09 -> brake.f0
        {latency => 10 ms .. 40 ms;};
    
    wheel_sensor_to_accel  : end to end flow wheel_sensor.f0 -> c04 -> speed_voter.f0 -> c06 -> speed_ctrl.f01 -> c08 -> acceleration.f0
        {latency => 10 ms .. 40 ms;};
    wheel_sensor_to_brake  : end to end flow wheel_sensor.f0 -> c04 -> speed_voter.f0 -> c06 -> speed_ctrl.f11 -> c09 -> brake.f0
        {latency => 10 ms .. 40 ms;};
properties
	security_properties::exposure => 100 applies to bluetooth_ctrl, tire_pressure;
	security_properties::exposure => 0 applies to speaker, screen, acceleration, brake, obstacle_camera, obstacle_radar, wheel_sensor, laser_sensor;
	security_properties::domains => ("entertainment") applies to entertainment, speaker, screen;
	security_properties::domains => ("control_notcritical") applies to tire_pressure, panel, panel_controller;
	security_properties::domains => ("control_critical") applies to obstacle_camera, obstacle_radar, wheel_sensor, laser_sensor, speed_ctrl, speed_voter,brake, acceleration;
annex EMV2 {**
	use types 		ErrorLibrary;
	use behavior  	ErrorLibrary::FailStop;

	composite error behavior
	states
		[brake.FailStop and acceleration.FailStop]-> FailStop;
	end composite;
**};						 	
end integration.generic;




end emsoft2016::integration;