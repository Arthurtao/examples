package security_resolute
public
with Resolute_Stdlib;

annex resolute {**
	check_component (comp : component) <=
	** "Check security levels for component " comp **
	check_buses_connections (comp) and 
	check_bouncer_connections (comp) and
	check_subcomponents (comp)
	
	
	--
	--  Rule R0: check that components sharing
	--  a bus have the same security level. 
	check_buses_connections (comp : component) <=
	** "R0: Components sharing a bus have the same security level" ** 
	forall (src : subcomponents(comp)) . 
		forall (dst : subcomponents(comp)) . 
			forall (connsrc : connections(src)) .
				forall (conndst : connections(dst)) .
					forall (thebus : subcomponents(comp)) .
--					true
					connected_to_bus (thebus,connsrc,src) and
					connected_to_bus (thebus,conndst,dst) and
					(src <> dst)
					
	        =>	        
		check_security_level (src,dst) 
	
	--
	--  Rule R1: check that components connected through ports
	--  share the same security level.
	check_ports_connections () <=
	** "R1: Inter-connected components have the same security levels" **
	forall (comp : component) . 
		forall  (conn : connections (comp)) . true
		=> check_conn_security_level (conn)
		 
		
	check_conn_security_level (conn : connection) <=
	** "Check connection " conn **
	   check_security_level (parent (source(conn)), parent (destination(conn)))
		
	--
	--  Rule R2: Processes on the same processor with different security levels bound to separate memories
	--
	check_memory_separation () <=
	** "R2: Check that processes with different security levels are on separate memories" **
	forall (pr1 : component) (pr2 : component) (cpu : processor) (mem : memory) .
		is_bound_to (pr1, cpu) and is_bound_to (pr1, mem) and
		is_bound_to (pr2, cpu) and is_bound_to (pr2, mem) =>
		check_security_level (pr1,pr2)
		
	--
	--  Rule R4: all threads for a process have the same security levels unless the process is verified
	--
	check_threads_level () <=
	** "R4: Check that processes with different security levels are on separate memories" **
	forall (thr1 : thread) (thr2 : thread) (pr : process) .
		property (pr,security_properties::Is_Verified) = false and
		parent(thr1) = parent(thr2) =>
		check_security_level (thr1,thr2)


	--
	--  Rule R5: an MLS components has to explicitly define the security level of its ports
	--
	check_mls_components () <=
	** "R5: Check that MLS components explicitly define security levels of their features" **
	forall (comp : component) .
		forall (f : features (comp)) .
			(length (property (comp, security_properties::Security_Level)) > 0)
		=>
		length (intersect (property (comp, security_properties::Security_Level),property (f, security_properties::Security_Level))) > 0
		
	--
	--  Rule R6: check that there is no component that can
	--  lower a security level if the middle component is not verified
	--
	check_bouncer_connections (comp : component) <=
	** "R6: Check there is no possible bypass by a non-verified component" ** 
	forall (src : subcomponents(comp)) . 
		forall (middle : subcomponents(comp)) . 
		(property (middle, security_properties::Is_Verified) = false) and 
			forall (dst : subcomponents(comp)) . 
				forall (connsrc : connections(src)) .
					forall (conndst : connections(dst)) .
						forall (connmiddle1 : connections(middle)) .
							forall (connmiddle2 : connections(middle)) .
								forall (thebus1 : subcomponents(comp)) .
									forall (thebus2 : subcomponents(comp)) .
--					true
                     
					connected_to_bus (thebus1,connsrc,src) and
					connected_to_bus (thebus1,connmiddle1,middle) and
					connected_to_bus (thebus2,conndst,dst) and
					connected_to_bus (thebus2,connmiddle2,middle) and
					(src <> dst) and
					(src <> middle) and
					(middle <> dst) and
					(thebus1 <> thebus2) 
	        =>	        
		check_security_level (src,dst)
	
	 
   connected_to_bus(thebus : component, conn : connection, b : component) : bool =
--    (print_aadl (thebus)) and
  	((source(conn) = thebus) and (parent(destination(conn)) = b))
  	or ((destination(conn) = thebus) and (parent(source(conn)) = b))
		
	 
	print_empty() <= ** "" ** true
	
	print_aadl(a : aadl) <=
	  ** a **
	  true
	  
	print_set(s : {aadl}) <=
	  ** s **
	  true
 

	check_subcomponents (comp : component) <=
	** "Check bus connections for subcomponents" **
	forall (subco : subcomponents (comp)) . true => 
		check_component (subco)
	
	
	check_security_level (comp1 : aadl, comp2 : aadl) <=
	** "Component " comp1 " and " comp2 " have the same security level(s)" **
		true 
	 =>  length(intersect (property (comp1, security_properties::Security_Level),
	 	            property (comp2, security_properties::Security_Level)))
	      = length(property (comp2, security_properties::Security_Level))
		
**};
end security_resolute;
