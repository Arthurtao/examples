package security_resolute
public
with Resolute_Stdlib;

annex resolute {**
	check_security () <=
	** "Check security constraints" **
	check_general_rules() and check_cwes()



	

	-------------------------------------------------------------
	--  General security rules
	-------------------------------------------------------------
	check_general_rules () <=
	** "Check general security rules" ** 
	check_buses_connections () and
	check_ports_connections() and
	check_memory_separation () and
	check_runtime_separation () and
	check_threads_level () and
	check_mls_components () and
	check_bouncer ()
	
	--to be completed
	
	--
	--  Rule R0: check that components sharing
	--  a bus have the same security level.
	check_buses_connections () <=
	** "R0: Components sharing a bus have the same security level" ** 
	forall (c : component ) . true
	=> check_buses_connections_component (c)
	
	check_buses_connections_component (comp : component) <=
	** "Check that component " comp " does not share a bus with a component at a different criticality level" ** 
	forall (src : subcomponents(comp)) . 
		forall (dst : subcomponents(comp)) . 
			forall (connsrc : connections(src)) .
				forall (conndst : connections(dst)) .
					forall (thebus : subcomponents(comp)) .
--					true
					connected_to_bus (thebus,connsrc,src) and
					connected_to_bus (thebus,conndst,dst) and
					(src <> dst)
					
	        =>	        
		check_security_level (src,dst) 
	
	--
	--  Rule R1: check that components connected through ports
	--  share the same security level.
	check_ports_connections () <=
	** "R1: Inter-connected components have the same security levels" **
	forall (comp : component) . 
		forall  (conn : connections (comp)) . true
		=> check_conn_security_level (conn)
		 
		
	check_conn_security_level (conn : connection) <=
	** "Check connection " conn **
	   check_security_level (parent (source(conn)), parent (destination(conn)))
		
	--
	--  Rule R2: Processes on the same processor with different security levels bound to separate memories
	--
	check_memory_separation () <=
	** "R2: Check that processes with different security levels are on separate memories" **
	forall (pr1 : component) (pr2 : component) (cpu : processor) (mem : memory) .
		is_bound_to (pr1, cpu) and is_bound_to (pr1, mem) and
		is_bound_to (pr2, cpu) and is_bound_to (pr2, mem) =>
		check_security_level (pr1,pr2)

	--
	--  Rule R3: Processes with different security levels are on different processor/partitions
	--
	check_runtime_separation () <=
	** "R3: Check that processes with different security levels are on separate runtime(s)" **
	check_processor_separation() and check_virtual_processor_separation ()

	check_processor_separation () <=
	** "R3: Check that processes with different security levels are on separate runtime(s)" **
	forall (pr1 : component) (pr2 : component) (cpu : processor) .
		is_bound_to (pr1, cpu) and
		is_bound_to (pr2, cpu) =>
		check_security_level (pr1,pr2)


	check_virtual_processor_separation () <=
	** "R3: Check that processes with different security levels are on separate runtime(s)" **
	forall (pr1 : component) (pr2 : component) (vcpu : virtual_processor) .
		is_bound_to (pr1, vcpu) and
		is_bound_to (pr2, vcpu) =>
		check_security_level (pr1,pr2)

		
	--
	--  Rule R4: all threads for a process have the same security levels unless the process is verified
	--
	check_threads_level () <=
	** "R4: Check that processes with different security levels are on separate memories" **
	forall (thr1 : thread) (thr2 : thread) (pr : process) .
		property (pr,security_properties::Is_Verified) = false and
		parent(thr1) = parent(thr2) =>
		check_security_level (thr1,thr2)


	--
	--  Rule R5: an MLS components has to explicitly define the security level of its ports
	--
	check_mls_components () <=
	** "R5: Check that MLS components explicitly define security levels of their features" **
	forall (comp : component) .
		forall (f : features (comp)) .
			(length (property (comp, security_properties::Security_Level)) > 0)
		=>
		length (intersect (property (comp, security_properties::Security_Level),property (f, security_properties::Security_Level))) > 0
		
	--
	--  Rule R6: check that there is no component that can
	--  lower a security level if the middle component is not verified
	--
	check_bouncer () <=
	** "R6: Check there is no possible bypass" ** 
	forall (c : component) . true =>
	check_bouncer_component (c)
	
	check_bouncer_component (comp : component) <=
	** "R6: Check there is no possible bypass within component " comp ** 
	forall (src : subcomponents(comp)) . 
		forall (middle : subcomponents(comp)) .
		(property (middle, security_properties::Is_Verified) = false) and 
			forall (dst : subcomponents(comp)) . 
				forall (connsrc : connections(src)) .
					forall (conndst : connections(dst)) .
						forall (connmiddle1 : connections(middle)) .
							forall (connmiddle2 : connections(middle)) .
								forall (thebus1 : subcomponents(comp)) .
									forall (thebus2 : subcomponents(comp)) .
--					true
                     
					connected_to_bus (thebus1,connsrc,src) and
					connected_to_bus (thebus1,connmiddle1,middle) and
					connected_to_bus (thebus2,conndst,dst) and
					connected_to_bus (thebus2,connmiddle2,middle) and
					(src <> dst) and
					(src <> middle) and
					(middle <> dst) and 
					(thebus1 <> thebus2) 
	        =>	        
		check_security_level (src,dst)
	
	
	
	
	-------------------------------------------------------------
	--  CWE related rules
	-------------------------------------------------------------
	check_cwes () <=
	** "Check that the architecture handles existing common weaknesses" **
		check_cwe131() and 
		check_cwe362() and 
		check_cwe514() and
		check_cwe327()
	
	--
	-- CWE-131 - check buffer size
	-- 	 
	check_cwe131 () <=
	** "CWE131: incorrect calculation of buffer size" ** 
	forall (c : component) . true =>
	check_connections_queue_size_for_component (c) and check_timing_requirements (c)
	 
	 
	check_connections_queue_size_for_component (c : component) <=
	** "check connections for component " c ** 
	forall (conn : connections (c)) . true =>
		check_queue_size_connection (conn)
	 
	check_queue_size_connection (c : connection) <=
	** "check connection " c ** 
	property (source(c), Communication_Properties::Queue_Size) <= property (destination(c), Communication_Properties::Queue_Size)


 	--
 	-- The check_timing_requirements is more than just taking care
 	-- of the queue_size, it also has a look at the period
 	-- of communicating components
	check_timing_requirements (c : component) <=
	** "Check that timing requirements of communication with " c " are consistent" **
	forall (conn : connections (c)) .  
		has_property (c, Timing_Properties::Period) =>
		check_timing_requirements_connection (conn)
 
	check_timing_requirements_connection (conn : connection) <=
	** "Check timing requirements for connection " conn **
		property (parent(destination(conn)), Timing_Properties::Period) / property (destination (conn), Communication_Properties::Queue_Size)
	 	<=
	 	property (parent(source(conn)), Timing_Properties::Period) 


	--
	-- CWE-362 - race condition
	--
	
	check_cwe362 () <=
	** "CWE362: Concurrent Execution using Shared Resource with Improper Synchronization (Race Condition)" ** 
	forall (c : component) . true =>
	check_cwe362_component (c)
	
	check_cwe362_component (c : component) <=
	** "CWE362: check component " c **
	forall (conn : connections(c)) . is_data_access(conn) =>
	check_cwe362_component_connection (source(conn)) or 
 	check_cwe362_component_connection (destination(conn))
 
  
	check_cwe362_component_connection (d : aadl) <= 
	** "CWE362: check data " d **
	has_property (d , Thread_Properties::Concurrency_Control_Protocol)


	--
	-- CWE-514 - covert channel
	--	 
	check_cwe514 () <=
	** "CWE514: There are no covert channel" ** 
	forall (c : component) . true =>
	check_bouncer_component (c)


	--
	-- CWE-327 - use of risky or weak security protocol
	--	 
	check_cwe327 () <=
	** "CWE327: Use of risky or weak security protocol" ** 
	forall (c : component) . true =>
	true
	--  to be completed

	--
	--  Utility functions
	--	 
	 
   connected_to_bus(thebus : component, conn : connection, b : component) : bool =
--    (print_aadl (thebus)) and
  	((source(conn) = thebus) and (parent(destination(conn)) = b))
  	or ((destination(conn) = thebus) and (parent(source(conn)) = b))
		
	 
	print_empty() <= ** "" ** true
	
	print_aadl(a : aadl) <=
	  ** a **
	  true
	  
	print_set(s : {aadl}) <=
	  ** s **
	  true
 

	
	check_security_level (comp1 : aadl, comp2 : aadl) <=
	** "Component " comp1 " and " comp2 " have the same security level(s)" **
		true 
	 =>  length(intersect (property (comp1, security_properties::Security_Level),
	 	            property (comp2, security_properties::Security_Level)))
	      = length(property (comp2, security_properties::Security_Level))
		
**};
end security_resolute;
