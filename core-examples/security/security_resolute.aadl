package security_resolute
public
with Resolute_Stdlib;

annex resolute {**
	check_component (comp : component) <=
	** "Check security levels for component " comp **
	check_buses_connections (comp) and 
--	check_bouncer_connections (comp) and
	check_subcomponents (comp)
	
	check_bouncer_connections (comp : component) <=
	** "Check there is no possible bypass by a non-verified component" ** 
	forall (src : system) (middle : system) (dst : system) (thebus1 : bus) (thebus2 : bus)
	       (conn1 : connections (comp)) (conn2 : connections (comp)) 
			. (connected_to_bus(thebus1,conn1,middle)) and 
			  (connected_to_bus(thebus1,conn1,src)) and 
			  (connected_to_bus(thebus2,conn2,middle)) and 
			  (connected_to_bus(thebus2,conn2,dst)) and 
			  (src <> dst) and
			  (thebus1 <> thebus2) and
			  (middle <> src) and
			  (middle <> dst) and
			  (property (middle, security_properties::Is_Verified) = false)
	        =>  
		check_security_level (src,dst)
	
	check_buses_connections (comp : component) <=
	** "Check buses connections " ** 
	forall (src : component) (dst : component) (thebus : bus)
	       (conn1 : connections (comp)) (conn2 : connections (comp)) 
			. (has_parent(src)) and
			  (has_parent(dst)) and
			  (parent(src) = comp) and
			  (parent(dst) = comp) and
			  (connected_to_bus(thebus,conn1,src)) and 
			  (connected_to_bus(thebus,conn2,dst)) and 
			  (src <> dst) 
	        =>  
		check_security_level (src,dst)
	 
   connected_to_bus(thebus : bus, conn : connection, b : component) : bool =
  	(source(conn) = thebus and parent(destination(conn)) = b)
  	or (destination(conn) = thebus and parent(source(conn)) = b)
	
	
	check_subcomponents (comp : component) <=
	** "Check bus connections for subcomponents" **
	forall (subco : subcomponents (comp)) . true => 
		check_component (subco)
	
	
	check_security_level (comp1 : aadl, comp2 : aadl) <=
	** "Component " comp1 " and " comp2 " have the same security level" **
	 true => property (comp1, security_properties::Security_Level) = property (comp2, security_properties::Security_Level)
		
**};
end security_resolute;
