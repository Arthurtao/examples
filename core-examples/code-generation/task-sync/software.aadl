package tasksync::software
public
  with Data_Model;

----------
-- Data --
----------

data Alpha_Type
properties
  Data_Model::Data_Representation => integer;
end Alpha_Type;

-----------------
-- Subprograms --
-----------------

subprogram Produceflow_Spg
features
  Data_Source : out parameter Alpha_Type;
properties
  source_language => (C);
  source_name     => "user_produceflow_spg";
  source_text     => ("tasksync.c");
end Produceflow_Spg;

subprogram Consumeflow_Spg
features
  Data_Sink : in parameter Alpha_Type;
properties
  source_language => (C);
  source_name     => "user_consumeflow_spg";
  source_text     => ("tasksync.c");
end Consumeflow_Spg;

subprogram computerflow_Spg
features
  Data_Source : out parameter Alpha_Type;
  Data_Sink : in parameter Alpha_Type;
properties
  source_language => (C);
  source_name     => "user_computeflow_spg";
  source_text     => ("tasksync.c");
end computerflow_Spg;


subprogram singletask_spg
properties
  source_language => (C);
  source_name     => "user_singletask_spg";
  source_text     => ("tasksync.c");
end singletask_spg;

-------------
-- Threads --
-------------

thread singletask
end singletask;

thread implementation singletask.i
calls 
Mycalls: {
  P_Spg : subprogram singletask_spg;
};
properties
  Dispatch_Protocol => Periodic;
  Period            => 1000 Ms;
end singletask.i;

thread producerflow
features
  Data_Source : out event data port Alpha_Type;
end producerflow;



thread implementation singletask.i2
calls 
Mycalls: {
  P_Spg : subprogram Produceflow_Spg;
  C_Spg : subprogram Computerflow_Spg;
  Q_Spg : subprogram Consumeflow_Spg;
};
connections
	c0 : parameter p_spg.Data_Source -> c_spg.data_sink;
	c1 : parameter c_spg.Data_Source -> q_spg.data_sink;
properties
  Dispatch_Protocol => Periodic;
  Period            => 1000 Ms;
end singletask.i2;

thread implementation producerflow.i
calls 
Mycalls: {
  P_Spg : subprogram Produceflow_Spg;
};
connections
  c0 : parameter P_Spg.Data_Source -> Data_Source;
properties
  Dispatch_Protocol => Periodic;
  Period            => 1000 Ms;
end producerflow.i;



 
thread computerflow
features
  Data_Sink : in event data port Alpha_Type;
  Data_source : out event data port Alpha_Type;
end computerflow;

thread implementation computerflow.i
calls 
Mycalls: {
  Q_Spg : subprogram computerflow_Spg;
};
connections
  c0 : parameter  Q_Spg.Data_Source -> Data_Source;
  c1 : parameter Data_Sink -> Q_Spg.Data_Sink;
properties
  Dispatch_Protocol => Sporadic;
  Period            => 1000 Ms;
end computerflow.i;

 
thread consumerflow
features
  Data_Sink : in event data port Alpha_Type;
end consumerflow;

thread implementation consumerflow.i
calls 
Mycalls: {
  Q_Spg : subprogram Consumeflow_Spg;
};
connections
  c0 : parameter Data_Sink -> Q_Spg.Data_Sink;
properties
  Dispatch_Protocol => Sporadic;
  Period            => 1000 Ms;
end consumerflow.i;



end tasksync::software;
