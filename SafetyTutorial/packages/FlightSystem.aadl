package FlightSystem
public
	with GPSSystem, AutomatedFlightGuidance;
with FlightControl, EMV2;
	with GPSParts;

	-- The flight system provides an operational context for the GPS example.
	-- It has a safety requirement that leads to a particular reliability value.
	-- From this we derive the expected reliability of the GPS.
	-- If the design of the GPS cannot achieve this value, we consider a design with two GPS instances and a GPSvoter.

	-- The flight system is used as the root for hazard analysis. 
	-- Three subsystems have been identified as hazard sources, one of them the GPS.
	-- The FHA can be run on the tier1 implementation.
	
	-- The flight system is also used as the root for fault impact analysis (aka. FMEA).
	-- This analysis can be run on both the teir1 and tier2 implementation.
	-- The report presents the impact of error sources within the flight system as well as external sources (pilot input)
	
	system FlightSystem
	features
	pilotInput: in data port;
	ObservableFailure: out feature;
	annex EMV2 {**
		use types ErrorLibrary, AFGErrorLibrary,GPSErrorLibrary;
		error propagations
		pilotInput: in propagation {NoPilotInput, ErraticPilotInput};
		ObservableFailure: out propagation {ServiceOmission, ErraticBehavior};
		flows
			NoFlightSystem: error source ObservableFailure{ServiceOmission} when {FlightSystemfailure};
			ErraticFlightSystem: error source ObservableFailure{ErraticBehavior};
			ErraticPilot: error path pilotInput{ErraticPilotInput} -> ObservableFailure{ErraticBehavior};
			NoPilot: error path pilotInput{NoPilotInput} -> ObservableFailure{ServiceOmission};
		end propagations;
		properties
			-- requirement that flight system should not fail to provide service 
			emv2::OccurrenceDistribution => [ ProbabilityValue => 2.5e-9 ; Distribution => Poisson;] 
			applies to ObservableFailure.ServiceOmission;
			-- a requirement that GPS should only operate erratically
			emv2::OccurrenceDistribution => [ ProbabilityValue => 2.0e-4 ; Distribution => Poisson;] 
			applies to ObservableFailure.ErraticBehavior;
			-- assumed probability of pilot error
			emv2::OccurrenceDistribution => [ ProbabilityValue => 2.0e-6 ; Distribution => Poisson;] 
			applies to pilotInput.ServiceOmission;
			emv2::OccurrenceDistribution => [ ProbabilityValue => 7.0e-6 ; Distribution => Poisson;] 
			applies to pilotInput.ErraticPilotInput;
	**};
	end FlightSystem;
	
	-- The tier1 configuration utilizes component specifications (types) only
	-- It relies on the EMV2 information in the type, which represents an abstraction of the implementation fault model
	-- In order to achieve the reliability required for the FlightSystem we calculate its failure occurrence probability
	-- based on specified failure occurrences of the subsystems.
	-- This leads to the (derived) requirement of GPS achieving the specified probability.
	system implementation FlightSystem.tier1
	subcomponents
		LocationProvider: system GPSSystem::GPS;
		AutoFlightGuidance: system AutomatedFlightGuidance::AutomatedFlightGuidance;
		FlightControl: system FlightControl::FlightControl;
	connections
		gpstoafg: port LocationProvider.location -> AutoFlightGuidance.position;
		afgtofc: port autoFlightGuidance.AFGOutput -> FlightControl.guidanceCommands;
		PilottoAfg: port pilotInput -> autoFlightGuidance.operatorCommand;
		FlightControlEffect: feature flightControl.flightSurfaceControl -> ObservableFailure;
	annex EMV2 {**
		use types ErrorLibrary;
		component error behavior
		-- flight control service represents the service of the flight system
		-- we map its output (physical control of flight surface) to the observable point
		-- at the flight system level. 
		propagations
		FTAObservableFailureStart: all-[FlightControl.flightSurfaceControl{ServiceOmission}]-> ObservableFailure{ServiceOmission};
		end component;
	**};
	end FlightSystem.tier1;

	system implementation FlightSystem.tier2 extends FlightSystem.tier1
	subcomponents
		LocationProvider: refined to system GPSSystem::GPS.CEBound;
		AutoFlightGuidance: refined to system AutomatedFlightGuidance::AutomatedFlightGuidance.functional;
	end FlightSystem.tier2;


	system implementation FlightSystem.DualGPS
	subcomponents
		LocationProvider1: system GPSSystem::GPS.CEBound;
		LocationProvider2: system GPSSystem::GPS.CEBound;
		voter: abstract GPSParts::GPSVoter; 
		AutoFlightGuidance: system AutomatedFlightGuidance::AutomatedFlightGuidance.functional;
		FlightControl: system FlightControl::FlightControl;
	connections
		gps1tovoter: port LocationProvider1.location -> voter.inLocation1;
		gps2tovoter: port LocationProvider2.location -> voter.inLocation2;
		votertoafg: port voter.outLocation -> autoFlightGuidance.position;
		afgtofc: port autoFlightGuidance.AFGOutput -> flightControl.guidanceCommands;
		pilottoafg: port pilotInput -> autoFlightGuidance.operatorCommand;
	annex EMV2 {**
		use types ErrorLibrary;
		component error behavior
		-- flight control service represents the service of the flight system
		-- we map its output (physical control of flight surface) to the observable point
		-- at the flight system level. 
		propagations
		FTAObservableFailureStart: all-[flightControl.flightSurfaceControl{ServiceOmission}]-> ObservableFailure;
		end component;
	**};
	end FlightSystem.DualGPS;


end FlightSystem;
