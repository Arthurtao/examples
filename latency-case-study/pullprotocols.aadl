	package pullprotocols
	public
	
	process PullDCFMInputDataset
		features
			SenderData: in data port ;
			ReceiverData: out data port ;
		flows
			Xfer: flow path SenderData -> ReceiverData;
	end PullDCFMInputDataset;

	process implementation PullDCFMInputDataset.CrossPartition
		subcomponents
			sender: thread PullDCFMDataSetSender;
			requestor: thread PullDCFMDataSetRequestor;
		connections
			incoming: port SenderData -> sender.SenderData;
			outgoing: port requestor.ReceiverData -> ReceiverData;
			STRequest: port requestor.SourceTracksRequest -> sender.SourceTracksRequest { Timing => immediate; };
			STReply: port sender.SendSourceTrackSet -> requestor.ReceivedSourceTrackSet { Timing => delayed; };
			CTRequest: port requestor.CorrelatedTracksRequest -> sender.CorrelatedTracksRequest { Timing => immediate; };
			CTReply: port sender.SendCorrelatedTrackSet -> requestor.ReceivedCorrelatedTrackSet { Timing => delayed; };
			APRequest: port requestor.OwnAircraftPositionRequest -> sender.OwnAircraftPositionRequest { Timing => immediate; };
			APReply: port sender.SendOwnAircraftPosition -> requestor.ReceivedOwnAircraftPosition { Timing => delayed; };
		flows
			XferOnly: end to end flow requestor.SourceTrackRequestFlow -> STRequest -> sender.SourceTrackFlowpath -> STReply ->
					requestor.SourceTrackReceivedFlow -> CTRequest -> sender.CorrelatedFlow -> CTReply -> requestor.
					CorrelatedTrackReceivedFlow -> APRequest -> sender.AircraftPositionFlow -> APReply -> requestor.
					AircraftPositionReceivedFlow;
			Xfer: flow path SenderData -> incoming -> sender.SenderDataSetFLow -> STReply -> requestor.SourceTrackReceivedFlow
					-> CTRequest -> sender.CorrelatedFlow -> CTReply -> requestor.CorrelatedTrackReceivedFlow -> APRequest -> sender.
					AircraftPositionFlow -> APReply -> requestor.ReceivedDataSetFlow -> outgoing -> ReceiverData;
		properties
			Latency => 10 ms .. 10 ms applies to XferOnly;
	end PullDCFMInputDataset.CrossPartition;


	thread PullDCFMDataSetSender
		features
		-- data to be transferred
			SenderData: in data port ;
			-- protocol interaction ports
			SourceTracksRequest: in data port;
			SendSourceTrackSet: out data port ;
			CorrelatedTracksRequest: in data port;
			SendCorrelatedTrackSet: out data port ;
			OwnAircraftPositionRequest: in data port;
			SendOwnAircraftPosition: out data port ;
		flows
			SenderDataSetFLow: flow path SenderData -> SendSourceTrackSet;
			SourceTrackFlow: flow source SendSourceTrackSet;
			SourceTrackFlowpath: flow path SourceTracksRequest -> SendSourceTrackSet;
			CorrelatedFlow: flow path CorrelatedTracksRequest -> SendCorrelatedTrackSet;
			AircraftPositionFlow: flow path OwnAircraftPositionRequest -> SendOwnAircraftPosition;
		properties
			Dispatch_Protocol => Periodic;
			Period => 100 ms;
	end PullDCFMDataSetSender;

	thread PullDCFMDataSetRequestor
		features
		-- data being transferred
			ReceiverData: out data port ;
			-- protocol interaction ports
			SourceTracksRequest: out data port;
			ReceivedSourceTrackSet: in data port ;
			CorrelatedTracksRequest: out data port;
			ReceivedCorrelatedTrackSet: in data port ;
			OwnAircraftPositionRequest: out data port;
			ReceivedOwnAircraftPosition: in data port;
		flows
			SourceTrackRequestFlow: flow source SourceTracksRequest;
			SourceTrackReceivedFlow: flow path ReceivedSourceTrackSet -> CorrelatedTracksRequest;
			SourceTrackReceivedSink: flow sink ReceivedSourceTrackSet;
			CorrelatedTrackReceivedFlow: flow path ReceivedCorrelatedTrackSet -> OwnAircraftPositionRequest;
			AircraftPositionReceivedFlow: flow sink ReceivedOwnAircraftPosition;
			ReceivedDataSetFlow: flow path ReceivedOwnAircraftPosition -> ReceiverData;
		properties
			Dispatch_Protocol => Periodic;
			Period => 100 ms;
	end PullDCFMDataSetRequestor;

	system stub
	end stub;

	system implementation stub.i
		subcomponents
			prot: process PullDCFMInputDataset.CrossPartition;
	end stub.i;
	
	end pullprotocols;
