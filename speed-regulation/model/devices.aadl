--
--  This model is part of the Speed Regulation model
--  that is a case-study that uses AADL for making
--  analysis of different architecture variations.
--
--  A full description of this case study can be found
--  on https://wiki.sei.cmu.edu/aadl/index.php/SpeedRegulation
--
--  Copyright Carnegie Mellon Software Engineering Institute, 2014.
--

package speed_regulation::devices


public

with speed_regulation::icd;
with emv2;
with arp4761;
 
-----------------------------------
--  Camera and Object Detection  --
-----------------------------------
   
device camera
features
	picture : out data port speed_regulation::icd::picture;
flows
	f0 : flow source picture;
properties 
	Period => 200ms;
annex EMV2 {**
	use types speed_regulation::error_library; 

	error propagations
		picture : out propagation {NoValue};
	flows
		ef0 : error source picture{NoValue};
	end propagations;

	properties
		emv2::severity => ARP4761::Major applies to picture;
		emv2::likelihood => ARP4761::Probable applies to picture;
		emv2::hazards => 
			([	crossreference => "TBD";
				failure => "";
				phases => ("all");
				description => "No picture from the camera";
				comment => "Would impact the detection of obstacle";
			])
			applies to picture;
**};	
end camera;

device radar
features
	distance_estimate : out data port speed_regulation::icd::distance;
flows
	f0 : flow source distance_estimate;
properties 
	Period => 10ms;
annex EMV2 {**
	use types speed_regulation::error_library;

	error propagations
		distance_estimate : out propagation {NoValue,InvalidValue};
	flows
		ef0 : error source distance_estimate{NoValue,InvalidValue};
	end propagations;

	properties
		emv2::severity => ARP4761::Major applies to distance_estimate;
		emv2::likelihood => ARP4761::Probable applies to distance_estimate;
		emv2::hazards => 
			([	crossreference => "TBD";
				failure => "";
				phases => ("all");
				description => "No picture from the camera";
				comment => "Would impact the detection of obstacle";
			])
			applies to distance_estimate;
**};
end radar;
 
---------------------
--  Speed Sensors  --
---------------------

device speed_sensor
features
	speed : out data port speed_regulation::icd::speed;
flows
	f0 : flow source speed;
annex EMV2 {**
	use types speed_regulation::error_library;

	error propagations
		speed : out propagation {NoValue,InvalidValue};
	flows
		ef0 : error source speed{NoValue,InvalidValue};
	end propagations;

	properties
		emv2::severity => ARP4761::Major applies to speed.novalue;
		emv2::likelihood => ARP4761::Probable applies to speed.novalue;
		emv2::hazards => 
			([	crossreference => "TBD";
				failure => "";
				phases => ("all");
				description => "No speed from sensor";
				comment => "";
			])
			applies to speed.novalue;
**};
end speed_sensor; 

device speed_wheel_sensor extends speed_sensor
properties
	Period => 10ms;
end speed_wheel_sensor;

device speed_laser_sensor extends speed_sensor
properties
	Period => 10ms;
end speed_laser_sensor;

------------------
--  GPS device  --
------------------ 

device gps
features
	position : out data port speed_regulation::icd::gps_position;
flows
	f0 : flow source position;
annex EMV2 {**
	use types speed_regulation::error_library;

	error propagations
		position : out propagation {NoValue,InvalidValue};
	flows
		ef0 : error source position{NoValue,InvalidValue};
	end propagations;

	properties
		emv2::severity => ARP4761::Major applies to position;
		emv2::likelihood => ARP4761::Probable applies to position;
		emv2::hazards => 
			([	crossreference => "TBD";
				failure => "";
				phases => ("all");
				description => "No value from the gps";
				comment => "";
			])
			applies to position.novalue;
		emv2::hazards => 
			([	crossreference => "TBD";
				failure => "";
				phases => ("all");
				description => "Invalid value from the gps";
				comment => "";
			])
			applies to position.invalidvalue;			
**};
end gps;

device implementation gps.impl1
properties
	Period => 6ms;
end gps.impl1;

device implementation gps.impl2
properties
	Period => 9ms;
end gps.impl2;

----------------------
--  Warning Device  --
----------------------

device warning_device
features
	warning : in event data port speed_regulation::icd::boolean;
flows
	f0 : flow sink warning;
properties
	Period => 500ms;
annex EMV2 {**
	use types 		speed_regulation::error_library;
	use behavior  	speed_regulation::error_library::simple;

	error propagations
		warning : in propagation {NoValue,InvalidValue};
	flows
		ef0 : error sink warning{NoValue,InvalidValue};
	end propagations;
	
	component error behavior
	events
		Reset : recover event;
	transitions
		t0 : Operational -[warning{NoValue}]-> Failed;
		t1 : Operational -[warning{InvalidValue}]-> Failed;
		t2 : Failed -[Reset]-> Operational;
	end component;
**};
end warning_device;

-------------
--  Brake  --
-------------

device brake
features
	cmd : in event data port speed_regulation::icd::speed_command.i;
flows
	f0 : flow sink cmd;
properties
	Period => 2ms;
annex EMV2 {**
	use types speed_regulation::error_library;
	use behavior  	speed_regulation::error_library::simple;

	error propagations
		cmd : in propagation {NoValue,InvalidValue};
	flows
		ef0 : error sink cmd{NoValue,InvalidValue};
	end propagations;
	
	component error behavior
	events
		Reset : recover event;
	transitions
		t0 : Operational -[cmd{NoValue}]-> Failed;
		t1 : Operational -[cmd{InvalidValue}]-> Failed;
		t2 : Failed -[Reset]-> Operational;
	end component;
**};
end brake;

device acceleration
features
	cmd : in event data port speed_regulation::icd::speed_command.i;
flows
	f0 : flow sink cmd;
properties
	Period => 2ms;
annex EMV2 {**
	use types speed_regulation::error_library;
	use behavior  	speed_regulation::error_library::simple;

	error propagations
		cmd : in propagation {NoValue,InvalidValue};
	flows
		ef0 : error sink cmd{NoValue,InvalidValue};
	end propagations;
	
	
	component error behavior
	events
		Reset : recover event;
	transitions
		t0 : Operational -[cmd{NoValue}]-> Failed;
		t1 : Operational -[cmd{InvalidValue}]-> Failed;
		t2 : Failed -[Reset]-> Operational;
	end component;
**};
end acceleration;

end speed_regulation::devices;